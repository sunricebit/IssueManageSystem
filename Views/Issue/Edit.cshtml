@model Issue;

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<h3 class="mt-5">New Issue</h3>

@using (Html.BeginForm("Edit", "Issue", FormMethod.Post, new { @class = "my-5", @id = "editForm3" }))
{
    <div class="d-flex flex-column" style="gap: 24px">
        @Html.HiddenFor(model => model.Id)
        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Project.Name, new { @class = "control-label mb-1" })
            @Html.TextBoxFor(model => model.Project.Name, new { @class = "form-control", @readonly = "readonly" })
        </div>

        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Title, new { @class = "control-label mb-1" })<span class="text-danger">*</span>
            @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>

        <div class="form-group mb-3">
            @Html.LabelFor(model => model.TypeId, new { @class = "control-label mb-1" })<span class="text-danger">*</span>
            @Html.DropDownListFor(model => model.TypeId, new SelectList(ViewBag.Types, "Id", "Value"), new { @class = "form-control" })
        </div>

        <div class="form-group mb-3">
            @Html.LabelFor(model => model.Description, new { @class = "control-label mb-1" })<span class="text-danger">*</span>
            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @id = "descriptionInput3" })
        </div>

        <div class="row mb-3">
            <div class="col-6 mb-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.AssigneeId, "Assignee", new { @class = "control-label mb-1" })
                    @Html.DropDownListFor(model => model.AssigneeId, new SelectList(ViewBag.Assignees, "Id", "Name"), "Select a manager", new { @class = "form-control" })
                </div>
            </div>

            <div class="col-6 mb-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.MilestoneId, "Milestone", new { @class = "control-label mb-1" })
                    @Html.DropDownListFor(model => model.MilestoneId, new SelectList(ViewBag.Milestones, "Id", "Title"), "Select a manager", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MilestoneId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-6 mb-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.StatusId, "Status", new { @class = "control-label mb-1" })<span class="text-danger">*</span>
                    @Html.DropDownListFor(model => model.StatusId, new SelectList(ViewBag.Statuses, "Id", "Value"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-6 mb-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProcessId, "Process", new { @class = "control-label mb-1" })<span class="text-danger">*</span>
                    @Html.DropDownListFor(model => model.ProcessId, new SelectList(ViewBag.Processes, "Id", "Value"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProcessId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-6 mb-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ParentIssueId, new { @class = "control-label mb-1" })
                    @Html.DropDownListFor(model => model.ParentIssueId, new SelectList(ViewBag.Issues, "Id", "Title"), "Select a parent issue", new { @class = "form-control" })
                </div>
            </div>
        </div>

        <div class="d-flex" style="gap: 12px">
            <button class="btn btn-primary mr-2" style="max-width: 130px" type="button" onclick="validateAndSubmit()">Save change</button>
            <button class="btn btn-secondary" type="button" style="max-width: 130px">Canel</button>
        </div>
    </div>
}

<script src="~/plugin/ckeditor/ckeditor.js"></script>

<script>CKEDITOR.replace('descriptionInput3', {
        width: ['100%'], height: ['100px']
    });
    function validateAndSubmit() {
        var descriptionInput = CKEDITOR.instances['descriptionInput3'].getData();
        if ($("#editForm3").valid()) {
            document.forms["editForm3"].submit();
        }
    }</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
