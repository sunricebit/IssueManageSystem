@model List<IMS.ViewModels.Permission.PermissionViewModel>
@{
    ViewData["Title"] = "Manage Permission";
    List<string> roles = ViewBag.Roles;
}
<div class="container-fluid px-4">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="mt-4">Permission List</h1>
    </div>
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            Permission Table
        </div>
        <div class="card-body">
            <form asp-controller="Permission" asp-action="SearchPage" method="get">
                <div class="row">
                    <div class="col-md-6">
                        <label for="keyword" class="form-label">Search:</label>
                        <input type="text" id="keyword" name="page" class="form-control" placeholder="Search..." value="@ViewBag.SearchValue">
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary">Search Page</button>
                    </div>
                </div>
            </form>
            <br />
            <table class="table table-bordered" id="permissionTable">
                <thead>
                    <tr>
                        <th></th>
                        @foreach (var role in roles)
                        {
                            <th>@role</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pageAccess in Model.First().PagesAcess)
                    {
                        <tr>
                            <td><strong>@pageAccess.Page</strong></td>
                            @foreach (var permission in Model)
                            {
                                <td>
                                    <input type="checkbox" @(permission.PagesAcess.FirstOrDefault(pa => pa.Page == pageAccess.Page).CanAccess ? "checked" : "") /> Can Access <br />
                                    <input type="checkbox" @(permission.PagesAcess.FirstOrDefault(pa => pa.Page == pageAccess.Page).CanAdd ? "checked" : "") /> Can Create <br />
                                    <input type="checkbox" @(permission.PagesAcess.FirstOrDefault(pa => pa.Page == pageAccess.Page).CanUpdate ? "checked" : "") /> Can Update <br />
                                    <input type="checkbox" @(permission.PagesAcess.FirstOrDefault(pa => pa.Page == pageAccess.Page).CanExport ? "checked" : "") /> Can Export <br />
                                    <input type="checkbox" @(permission.PagesAcess.FirstOrDefault(pa => pa.Page == pageAccess.Page).CanDelete ? "checked" : "") /> Can Delete <br />
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            <br />
            <button class="btn btn-primary" onclick="updatePermissionData()">
                <i class="fa-solid fa-pen-to-square"></i>
                Update Permision
            </button>
        </div>
    </div>
</div>

<script>
    function getPermissionData() {
        var permissionData = [];
        var pagesList = [];
        var tableData = [];
        var rolesList = [];

        // Lặp qua từng cột của header để lấy danh sách role
        $('#permissionTable thead tr th').each(function () {

            var role = $(this).text();
            // Kiểm tra nếu giá trị role không có hoặc rỗng, bỏ qua
            if (role.trim() !== '') {
                rolesList.push(role);
            }
        });

        // Lặp qua từng dòng trong tbody của bảng để lấy danh sách page
        $('#permissionTable tbody tr').each(function () {
            var page = $(this).find('td:first strong').text();

            // Kiểm tra nếu giá trị page không có hoặc rỗng, bỏ qua
            if (page.trim() !== '') {
                pagesList.push(page);
            }
        });

        // Lặp qua từng dòng trong tbody để xây dựng mảng hai chiều
        $('#permissionTable tbody tr').each(function () {
            var rowData = [];
            $(this).find('td').each(function () {
                var cellData = $(this);
                rowData.push(cellData);
            });
            tableData.push(rowData);
        });
        var numColumns = tableData[0].length;
        console.log(numColumns);

        // Lặp qua từng cột trong tbody để tạo danh sách PermissionViewModel
        for (var colIndex = 1; colIndex < numColumns; colIndex++) {
            var role = rolesList[colIndex - 1];
            var pageAccessList = [];

            // Lặp qua từng ô dữ liệu của dòng (từ cột thứ 2 trở đi)
            for (var rowIndex = 0; rowIndex < tableData.length; rowIndex++) {
                var cellData = tableData[rowIndex][colIndex];

                // Lấy giá trị page từ danh sách pages
                var page = pagesList[rowIndex];

                // Lấy dữ liệu từ checkbox trong cell
                var canAccess = $(cellData).find('input:eq(0)').prop('checked');
                var canCreate = $(cellData).find('input:eq(1)').prop('checked');
                var canUpdate = $(cellData).find('input:eq(2)').prop('checked');
                var canExport = $(cellData).find('input:eq(3)').prop('checked');
                var canDelete = $(cellData).find('input:eq(4)').prop('checked');

                // Tạo đối tượng PageAccess
                var pageAccess = {
                    Page: page,
                    CanAccess: canAccess,
                    CanAdd: canCreate,
                    CanUpdate: canUpdate,
                    CanExport: canExport,
                    CanDelete: canDelete,
                };
                // Thêm vào danh sách
                pageAccessList.push(pageAccess);
            }

            // Thêm vào danh sách PermissionViewModel
            var permission = {
                Role: role,
                PagesAcess: pageAccessList
            };
            console.log(permission);
            // Thêm vào danh sách
            permissionData.push(permission);
        }

        console.log(permissionData);
        return permissionData;
    }

    function updatePermissionData() {
        var permissionData = getPermissionData();

        $.ajax({
            url: '/Permission/Update',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(permissionData),
            success: function (data) {
                var messageSuccess = "Update permission success"
                var sucessTimeout
                if (messageSuccess) {
                    var notificationSuccess = document.getElementById("_messageSuccess");
                    notificationSuccess.innerHTML = messageSuccess;
                    notificationSuccess.style.display = 'block';

                    function closeNotificationSuccess() {
                        notificationSuccess.innerHTML = "";
                        notificationSuccess.style.display = 'none';
                    }

                    if (sucessTimeout) clearTimeout(sucessTimeout);
                    sucessTimeout = setTimeout(closeNotificationSuccess, 5000);
                }
            },
            error: function (error) {
                console.log(error);
            }
        });

        //var form = document.createElement('form');
        //form.method = 'post';
        //form.action = '/Permission/Update';
        //console.log("abc");
        //var input = document.createElement('input');
        //input.type = 'hidden';
        //input.name = 'permissionData';
        //input.value = JSON.stringify(permissionData);

        //form.appendChild(input);
        //document.body.appendChild(form);

        //// Submit form
        //form.submit();
    }
</script>